.decl field_or_local_variable_declaration(id: id, modifiers: id_list, type: id, declarators: id_list)
field_or_local_variable_declaration(id, mods, type, declarators) :-
    field_declaration(id, mods, type, declarators).
field_or_local_variable_declaration(id, mods, type, declarators) :-
    local_variable_declaration(id, mods, type, declarators).

/* Pre  [:left_type]<[:left_type_parameters]> [:left] = new [:right_type](); */
/* Post [:left_type]<[:left_type_parameters]> [:left] = new [:right_type]<>(); */
rewrite_node("fix_raw_use_of_generic_class", right_type, cat(@node_to_string(code, right_type), "<>")) :-
    field_or_local_variable_declaration(_, _, left_type, declarators),
    ast_type_to_type(left_type, [left_package, left_class, left_type_args]),
    source_code(_, code),
    (collection_type(left_package, left_class); map_type(left_package, left_class)),
    left_type_args != nil,
    list_contains(declarators, declarator),
    variable_declarator(declarator, _, initializer),
    class_instance_creation_expression(initializer, nil, nil, right_type, _, nil),
    ast_type_to_type(right_type, [right_package, right_class, nil]),
    (collection_type(right_package, right_class); map_type(right_package, right_class)).

/* Pre  Type [:var] = [:it]; */
/* Post Type<[:type]> [:var] = [:it]; */
rewrite_node("fix_raw_use_of_generic_class", left_type, @type_to_string([package, class, type_args])) :-
    local_variable_declaration(id, _, left_type, [declarator, nil]),
    ast_type_to_type(left_type, [_, _, nil]),
    variable_declarator(declarator, _, initializer),
    _has_type(initializer, [package, class, type_args]),
    type_args != nil.
