/* Pre  [:x].substring(0) */
/* Post [:x]              */
replace_node_with_node("simplify_calls_to_string_substring", id, substring_subject) :-
    method_invocation(id, substring_subject, "substring", [arg, nil]),
    has_type(substring_subject, ["java.lang", "String", nil]),
    evaluates_to_integer_value(arg, 0).

/* Pre  [:x].substring(0, [:x].length()) */
/* Post [:x]                             */
replace_node_with_node("simplify_calls_to_string_substring", id, substring_subject) :-
    method_invocation(id, substring_subject, "substring", [arg1, [arg2, nil]]),
    has_type(substring_subject, ["java.lang", "String", nil]),
    evaluates_to_integer_value(arg1, 0),
    method_invocation(arg2, length_subject, "length", nil),
    point_of_declaration(substring_subject, declaration_point),
    point_of_declaration(length_subject, declaration_point).


/* Pre  [:x].substring([:x].length()) */
/* Post ""                         */
replace_node_with_string("simplify_calls_to_string_substring", id, "\"\"") :-
    method_invocation(id, substring_subject, "substring", [arg, nil]),
    has_type(substring_subject, ["java.lang", "String", nil]),
    method_invocation(arg, length_subject, "length", nil),
    point_of_declaration(substring_subject, declaration_point),
    point_of_declaration(length_subject, declaration_point).

/* Pre  [:x].substring([:y], [:x].length()) */
/* Post [:x].substring([:y])                */
replace_node_with_string("simplify_calls_to_string_substring", id,
    cat(@node_to_string(code, substring_subject), ".substring(", @node_to_string(code, arg1), ")")
) :-
    method_invocation(id, substring_subject, "substring", [arg1, [arg2, nil]]),
    source_code(_, code),
    has_type(substring_subject, ["java.lang", "String", nil]),
    ! evaluates_to_integer_value(arg1, 0),
    method_invocation(arg2, length_subject, "length", nil),
    point_of_declaration(substring_subject, declaration_point),
    point_of_declaration(length_subject, declaration_point).
