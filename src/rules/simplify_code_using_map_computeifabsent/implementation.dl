/*
- if (![:map_var].containsKey([:key_var])) {
-     [:map_var].put([:key_var], [:value_var]);
- }
+ [:map_var].computeIfAbsent([:key_var], k -> [:value_var]);
*/
replace_node_with_string("simplify_code_using_map_computeifabsent", id,
    cat(@node_to_string(code, contains_key_object), ".computeIfAbsent(", @node_to_string(code, contains_key_arg), ", k -> ", @node_to_string(code, put_arg2), ");")
) :-
    if_statement(id, condition, then, nil),
    logical_complement_expression(condition, contains_key_expr),
    source_code(_, code),
    method_invocation(contains_key_expr, contains_key_object, "containsKey", [contains_key_arg, nil]),
    block(then, [statement, nil]),
    expression_statement(statement, put_expr),
    method_invocation(put_expr, put_expr_object, "put", [put_arg1, [put_arg2, nil]]),
    point_of_declaration(put_expr_object, map_decl),
    point_of_declaration(contains_key_object, map_decl),
    point_of_declaration(contains_key_arg, key_decl),
    point_of_declaration(put_arg1, key_decl).

/*
- [:value_type] [:value_var] = [:map_var].get([:key_var]);
- if ([:value_var] == null) {
-     [:value_var] = [:value_initializer];
-     [:map_var].put([:key_var], [:value_var]);
-     [:trailing_statements]
- }
+ [:value_type] [:value_var] = [:map_var].computeIfAbsent([:key_var], k -> {
+     [:value_type] [:value_var] = [:value_initializer];
+     [:trailing_statements]
+     return [:value_var];
+ });
*/

rewrite("simplify_code_using_map_computeifabsent", filename, start, end, cat(
    @node_to_string(code, map_var), ".computeIfAbsent(", @node_to_string(code, key_var), ", k -> {\n",
        @node_to_string(code, value_type), " ", @node_to_string(code, value_var), " = ", @node_to_string(code, value_initializer), ";\n",
        substr(code, t2_end, last_element_end - t2_end), "\n",
        "return ", @node_to_string(code, value_var), ";\n",
    "});"
)) :-

    /* There's two adjacent statements, the first is a local variable declaration and the other is an if */
    local_variable_declaration_statement(local_var_decl_stmt, decl),
    predecessor_of(local_var_decl_stmt, if_stmt),
    if_statement(if_stmt, cond, then, nil),

    /* Extract information used for rewriting */
    ends_at(if_stmt, end),
    filename_of(local_var_decl_stmt, filename),
    source_code(filename, code),

    /* Extract information from local variable declaration*/
    local_variable_declaration(decl, _, value_type, [declarator, nil]),
    variable_declarator(declarator, value_var, initializer),
    method_invocation(initializer, map_var, "get", [key_var, nil]),
    point_of_declaration(key_var, key_var_declaration_point),
    point_of_declaration(map_var, map_var_declaration_point),
    has_type(map_var, ["java.util", "Map", _]),

    /* Extract information used for rewriting */
    starts_at(initializer, start),

    /* The condition is an equality expression which checks if the value
     * from the initializer is null */
    equals_expression(cond, fst, snd),
    point_of_declaration(fst, decl),
    null_literal(snd),

    /* The then-clause is a block containing at least two statements */
    block(then, then_stmts),
    then_stmts = [t1, [t2, _]],

    /* The first statement is an expression statement containing an
     * assignment_expression assigning to value_var */
    expression_statement(t1, assignment),
    assignment_expression(assignment, lhs, value_initializer),
    point_of_declaration(lhs, decl),

    /* The second statement is a call to map_var.put */
    expression_statement(t2, put),
    method_invocation(put, subj, "put", [karg, [varg, nil]]),
    point_of_declaration(subj, map_var_declaration_point),
    point_of_declaration(karg, key_var_declaration_point),
    @node_to_string(code, value_var) = @node_to_string(code, varg),

    ends_at(t2, t2_end),

    list_last_element(then_stmts, last_element),
    ends_at(last_element, last_element_end).
