/**
 * Rewrite a try-catch statement into a try-with-resources statement.
 */
replace_range_with_fragment("fix_potential_resource_leaks", filename, try_start, decl_end,
    cat("try (", @node_to_string(code, declaration), ") {")
) :-
    try_statement(try_stmt, body, _, _),
    filename_of(try_stmt, filename),
    source_code(_, code),
    block(body, [declaration_stmt, _]),
    local_variable_declaration_statement(declaration_stmt, declaration),
    local_variable_declaration(declaration, _, type, [_, nil]),
    class_type(type, nil, type_name, _, _),
    autocloseable_type_name(type_name),
    method_invocation(_, subject, "close", nil),
    point_of_declaration(subject, declaration),
    starts_at(try_stmt, try_start),
    ends_at(declaration_stmt, decl_end).

/**
 * Rewrite
 * 
 * {
 *     ... first fragment ...
 *     Resource resource = new Resource();
 *     ... second fragment ...
 *     resource.close();
 *     ... third fragment ...
 * }
 * 
 * into
 *
 * {
 *     ... first fragment ...
 *     try (Resource resource = new Resource()) {
 *         ... second fragment ...
 *     }
 *     ... third fragment ...
 * }
 */

/**
 * Instances of the following classes should be ignored by this rule because close has no effect:
 *
 * java.io.ByteArrayOutputStream
 * java.io.ByteArrayInputStream
 * java.io.CharArrayReader
 * java.io.CharArrayWriter
 * java.io.StringReader
 * java.io.StringWriter
 */
