/**
 * Identical expressions should not be used on both sides of a binary operator
 * https://rules.sonarsource.com/java/RSPEC-1764
 */

/* Pre  [:x] == [:x] */
/* Post true         */
rewrite(1764, filename, start, end, "true") :-
    equals_expression(id, left, right),
        filename_of(id, filename),
        starts_at(id, start),
        ends_at(id, end),
        /* allow x == x as a check for != NaN, see
           https://rules.sonarsource.com/java/RSPEC-1764 */
        ! has_floating_point_type(left),
    string_representation(left, str),
    string_representation(right, str).

/* Pre  [:x] != [:x] */
/* Post false        */
rewrite(1764, filename, start, end, "false") :-
    not_equals_expression(id, left, right),
        filename_of(id, filename),
        starts_at(id, start),
        ends_at(id, end),
        /* allow x != x as a check for == NaN, see
           https://rules.sonarsource.com/java/RSPEC-1764 */
        ! has_floating_point_type(left),
    string_representation(left, str),
    string_representation(right, str).

/* Pre  [:x] && [:x] */
/* Post [:x]         */
rewrite(1764, filename, start, end, str) :-
    conditional_and_expression(id, left, right),
        filename_of(id, filename),
        starts_at(id, start),
        ends_at(id, end),
    string_representation(left, str),
    string_representation(right, str).

/* Pre  [:x] || [:x] */
/* Post [:x]         */
rewrite(1764, filename, start, end, str) :-
    conditional_or_expression(id, left, right),
        filename_of(id, filename),
        starts_at(id, start),
        ends_at(id, end),
    string_representation(left, str),
    string_representation(right, str).

/* Pre  [:x] - [:x] */
/* Post 0           */
rewrite(1764, filename, start, end, "0") :-
    subtraction_expression(id, left, right),
        filename_of(id, filename),
        starts_at(id, start),
        ends_at(id, end),
    string_representation(left, str),
    string_representation(right, str).

/* Pre  [:x] / [:x] */
/* Post 1           */
rewrite(1764, filename, start, end, "1") :-
    division_expression(id, left, right),
        filename_of(id, filename),
        starts_at(id, start),
        ends_at(id, end),
    string_representation(left, str),
    string_representation(right, str).
