.decl loop_bounds(filename: symbol, start: number, end: number)
loop_bounds(filename, start, end) :-
    for_statement(id, _, _, _, body),
    filename_of(id, filename),
    starts_at(body, start),
    ends_at(body, end).
loop_bounds(filename, start, end) :-
    do_statement(id, _, body),
    filename_of(id, filename),
    starts_at(body, start),
    ends_at(body, end).
loop_bounds(filename, start, end) :-
    while_statement(id, _, body),
    filename_of(id, filename),
    starts_at(body, start),
    ends_at(body, end).
loop_bounds(filename, start, end) :-
    enhanced_for_statement(id, _, _, body),
    filename_of(id, filename),
    starts_at(body, start),
    ends_at(body, end).

.decl inside_loop(id: id)
inside_loop(other_id) :-
    loop_bounds(filename, start, end),
    ast_node(other_id),
        starts_at(other_id, other_start),
        ends_at(other_id, other_end),
        filename_of(other_id, filename),
        other_start >= start,
        other_end <= end.

/* Pre  [:x] = [:y] */
/* Post             */
rewrite("remove_unused_assignments", filename, start, end, "") :-
    assignment_expression(id, lhs, _),
        starts_at(id, start),
        ends_at(id, end),
        filename_of(id, filename),
    point_of_declaration(lhs, declaration),
    local_variable_declaration(declaration, _, _, _),
    ! inside_loop(id),
    start = max z : { point_of_declaration(other_id, declaration), starts_at(other_id, z) }.
