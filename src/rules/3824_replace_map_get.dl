
/* Pre
{
    [:value_type] [:value_var] = [:map_var].get([:key_var]);
    if ([:value_var] == null) {
        [:value_var] = [:value_initializer];
        [:map_var].put([:key_var], [:value_var]);
        [:trailing_statements]
    }
    return [:value_var];
}
*/

/* Post
{
    return [:map_var].computeIfAbsent([:key_var], [:key_var] -> {
        [:value_type] [:value_var] = [:value_initializer];
        [:trailing_statements]
        return [:value_var];
    });
}
*/

rewrite(3824, filename, start, end, cat("{\n",
    "        return ", map_var_str, ".computeIfAbsent(", key_var_str, ", k -> {\n",
    "            ", value_type_str, " ", value_var_str, " = ", value_initializer_str, ";\n",
                 substr(code, t2_end, last_element_end - t2_end), "\n",
    "            return ", value_var_str, ";\n",
    "        });\n",
    "    }"
)) :-

    /* We are in a block with three statements */
    block(b, [s1, [s2, [s3, nil]]]),
        filename_of(b, filename),
        starts_at(b, start),
        ends_at(b, end),
        source_code(filename, code),

    /* The first statement is a local variable declaration statement */
    local_variable_declaration_statement(s1, decl),
    local_variable_declaration(decl, _, value_type, [declarator, nil]),
    variable_declarator(declarator, value_var, initializer),
    method_invocation(initializer, map_var, "get", [key_var, nil]),
    has_map_type(map_var),

    /* The second statement is an if-statement */
    if_statement(s2, cond, then, nil),

        /* The condition is an equality expression which checks if the value
         * from the initializer is null */
        equals_expression_unordered(cond, fst, snd),
        null_literal(fst),
        point_of_declaration(snd, decl),

        /* The then-clause is a block containing at least two statements */
        block(then, then_stmts),
        then_stmts = [t1, [t2, _]],

            /* The first statement is an expression statement containing an
             * assignment_expression assigning to value_var */
            expression_statement(t1, assignment),
            assignment_expression(assignment, lhs, value_initializer),
            point_of_declaration(lhs, decl),

            /* The second statement is a call to map_var.put */
            expression_statement(t2, put),
            method_invocation(put, subj, "put", [karg, [varg, nil]]),
            string_representation(subj, map_var_str),
            string_representation(karg, key_var_str),
            string_representation(varg, value_var_str),

            ends_at(t2, t2_end),

        list_last_element(then_stmts, last_element),
        ends_at(last_element, last_element_end),

    /* The third statement is a return statement */
    return_statement(s3, var),
    point_of_declaration(var, decl),

    string_representation(key_var, key_var_str),
    string_representation(map_var, map_var_str),
    string_representation(value_initializer, value_initializer_str),
    string_representation(value_type, value_type_str),
    string_representation(value_var, value_var_str).

