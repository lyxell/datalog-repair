/* Pre  for ([:x] : [:original]) {
            if ([:cond]) {
                [:result].add([:x])
            }
        }
   Post result.addAll([:original].stream()
                                 .filter(x -> [:cond])
                                 .collect(java.util.stream.Collectors.toList()));
*/

rewrite("simplify_code_using_streams", filename, start, end, cat(
    subject_str, ".addAll(", original_str, ".stream()",
                                           ".filter(", declarator_id_str, " -> ", cond_str, ")",
                                           ".collect(java.util.stream.Collectors.toList()));"
)) :-
    enhanced_for_statement(id, param, original, body),
        filename_of(id, filename),
        starts_at(id, start),
        ends_at(id, end),
    has_type(original, original_type),
    is_collection_type(original_type),
    /* The collection that is looped over should not be raw since this would
     * give the result of the stream type Object */
    class_type(original_type, _, targs, _),
    targs != nil,
    formal_parameter(param, nil, _, declarator_id),
    block(body, [if_stmt, nil]),
    if_statement(if_stmt, cond, then, nil),
    block(then, [expr_stmt, nil]),
    expression_statement(expr_stmt, invocation),
    method_invocation(invocation, subject, "add", [x, nil]),
    has_collection_type(subject),
    point_of_declaration(x, param),
    string_representation(cond, cond_str),
    string_representation(subject, subject_str),
    string_representation(declarator_id, declarator_id_str),
    string_representation(original, original_str).
