/* Collections */

/* Pre  [:x].size() == 0 */
/* Post [:x].isEmpty()   */
replace_node_with_string("simplify_code_using_collection_isempty", id, cat(@node_to_string(code, subject), ".isEmpty()")) :-
    (equals_expression(id, invocation, integer)
    ;equals_expression(id, integer, invocation)),
    source_code(_, code),
    method_invocation(invocation, subject, "size", nil),
    has_type(subject, [package, class, _]),
    (collection_type(package, class);map_type(package, class)),
    evaluates_to_integer_value(integer, 0).

/* Pre  [:x].size() != 0 */
/* Post ![:x].isEmpty()  */
replace_node_with_string("simplify_code_using_collection_isempty", id, cat("!", @node_to_string(code, subject), ".isEmpty()")) :-
    (not_equals_expression(id, invocation, integer)
    ;not_equals_expression(id, integer, invocation)),
    source_code(_, code),
    method_invocation(invocation, subject, "size", nil),
    has_type(subject, [package, class, _]),
    (collection_type(package, class);map_type(package, class)),
    evaluates_to_integer_value(integer, 0).

/* Pre  [:x].size() > 0 */
/* Post ![:x].isEmpty()  */
replace_node_with_string("simplify_code_using_collection_isempty", id, cat("!", @node_to_string(code, subject), ".isEmpty()")) :-
    greater_than_expression(id, invocation, integer),
    source_code(_, code),
    method_invocation(invocation, subject, "size", nil),
    has_type(subject, [package, class, _]),
    (collection_type(package, class);map_type(package, class)),
    evaluates_to_integer_value(integer, 0).

/* Pre  [:x].size() >= 1 */
/* Post ![:x].isEmpty()  */
replace_node_with_string("simplify_code_using_collection_isempty", id, cat("!", @node_to_string(code, subject), ".isEmpty()")) :-
    greater_than_or_equals_expression(id, invocation, integer),
    source_code(_, code),
    method_invocation(invocation, subject, "size", nil),
    has_type(subject, [package, class, _]),
    (collection_type(package, class);map_type(package, class)),
    evaluates_to_integer_value(integer, 1).

/* Strings */

/* Pre  [:x].length() == 0 */
/* Post [:x].isEmpty()     */
replace_node_with_string("simplify_code_using_collection_isempty", id, cat(@node_to_string(code, subject), ".isEmpty()")) :-
    (equals_expression(id, invocation, integer)
    ;equals_expression(id, integer, invocation)),
    source_code(_, code),
    method_invocation(invocation, subject, "length", nil),
    has_type(subject, ["java.lang", "String", nil]),
    evaluates_to_integer_value(integer, 0).

/* Pre  [:x].length() != 0 */
/* Post ![:x].isEmpty()    */
replace_node_with_string("simplify_code_using_collection_isempty", id, cat("!", @node_to_string(code, subject), ".isEmpty()")) :-
    (not_equals_expression(id, invocation, integer)
    ;not_equals_expression(id, integer, invocation)),
    source_code(_, code),
    method_invocation(invocation, subject, "length", nil),
    has_type(subject, ["java.lang", "String", nil]),
    evaluates_to_integer_value(integer, 0).

/* Pre  [:x].length() > 0 */
/* Post ![:x].isEmpty()   */
replace_node_with_string("simplify_code_using_collection_isempty", id, cat("!", @node_to_string(code, subject), ".isEmpty()")) :-
    greater_than_expression(id, invocation, integer),
    source_code(_, code),
    method_invocation(invocation, subject, "length", nil),
    has_type(subject, ["java.lang", "String", nil]),
    evaluates_to_integer_value(integer, 0).

/* Pre  [:x].length() >= 1 */
/* Post ![:x].isEmpty()    */
replace_node_with_string("simplify_code_using_collection_isempty", id, cat("!", @node_to_string(code, subject), ".isEmpty()")) :-
    greater_than_or_equals_expression(id, invocation, integer),
    source_code(_, code),
    method_invocation(invocation, subject, "length", nil),
    has_type(subject, ["java.lang", "String", nil]),
    evaluates_to_integer_value(integer, 1).
