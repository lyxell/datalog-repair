/* Pre  [:x] -> [:y].[:z]([:x]) */
/* Post [:y]::[:z] */
replace_node_with_string("simplify_code_using_method_references", lambda_expr,
    cat(@node_to_string(code, subject), "::", method)
) :-
    lambda_expression(lambda_expr, params, lambda_body),
    lambda_params(params, [param, nil]),
    method_invocation(lambda_body, subject, method, [arg, nil]),
    point_of_declaration(arg, param),
    subject != nil,
    /* We use 2 here since we get 1 from expression name and 1 from identifier */
    count : { point_of_declaration(_, param) } = 2,
    source_code(_, code).

/* Pre  [:x] -> new [:y]([:x]) */
/* Post [:y]::new */
replace_node_with_string("simplify_code_using_method_references", lambda_expr,
    cat(@node_to_string(code, type), "::new")
) :-
    lambda_expression(lambda_expr, params, lambda_body),
    lambda_params(params, [param, nil]),
    class_instance_creation_expression(lambda_body, _, nil, type, [arg, nil], nil),
    point_of_declaration(arg, param),
    source_code(_, code).

/* Pre  [:x] -> [:x].[:y]() */
replace_node_with_string("simplify_code_using_method_references", lambda_expr,
    cat(type_name, "::", method)
) :-
    lambda_expression(lambda_expr, params, lambda_body),
    lambda_params(params, [param, nil]),
    method_invocation(lambda_body, subject, method, nil),
    point_of_declaration(subject, param),
    _has_type(param, [_, type_name, nil]).
