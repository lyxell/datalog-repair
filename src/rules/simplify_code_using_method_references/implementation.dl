/* Pre  [:x] -> [:y].[:z]([:x]) */
/* Post [:y]::[:z] */
rewrite_node("simplify_code_using_method_references", lambda_expr, cat(subject_str, "::", method)) :-
    lambda_expression(lambda_expr, lambda_param, lambda_body),
    method_invocation(lambda_body, subject, method, [arg, nil]),
    string_representation(subject, subject_str),
    string_representation(arg, arg_str),
    string_representation(lambda_param, arg_str).

/* Pre  [:x] -> new [:y]([:x]) */
/* Post [:y]::new */
rewrite_node("simplify_code_using_method_references", lambda_expr, cat(type_str, "::new")) :-
    lambda_expression(lambda_expr, lambda_param, lambda_body),
    class_instance_creation_expression(lambda_body, _, nil, type, [arg, nil], nil),
    string_representation(type, type_str),
    string_representation(arg, arg_str),
    string_representation(lambda_param, arg_str).

/* Pre  [:x] -> [:x].[:y]() */
rewrite_node("simplify_code_using_method_references", lambda_expr, cat(type_name, "::", method_str)) :-
    lambda_expression(lambda_expr, params, lambda_body),
    lambda_params(params, [param, nil]),
    method_invocation(lambda_body, subject, method_str, nil),
    string_representation(subject, subject_str),
    string_representation(param, subject_str),
    _has_type(param, [_, type_name, nil]).
