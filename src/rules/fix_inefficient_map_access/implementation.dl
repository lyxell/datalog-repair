/**
 * Introduce entry by iterating over entrySet instead of keySet.
 */
rewrite("fix_inefficient_map_access", filename, start, end + 1,
    cat("for (Map.Entry", @type_args_to_string(type_args), " entry : ", @node_to_string(code, map_reference), ".entrySet()) {\n",
        @node_to_string(code, param), " = entry.getKey();")
) :-
    enhanced_for_statement(id, param, expression, body),
        filename_of(id, filename),
        starts_at(id, start),
        starts_at(body, end),

    source_code(_, code),

    /* expression is a call to map.keySet() */
    method_invocation(expression, map_reference, "keySet", nil),
    _has_type(map_reference, [package, class, type_args]),
    type_args != nil,
    map_type(package, class),

    /* check that the references refer to same object */
    point_of_declaration(map_reference, decl),
    point_of_declaration(subject, decl),

    /* body contains a call to map.get(key) */
    ancestor_of(body, map_get),
    method_invocation(map_get, subject, "get", [key, nil]),
    point_of_declaration(key, param).

/**
 * Use entry.getValue() instead of map.get(key) if available.
 */
replace_node_with_string("fix_inefficient_map_access", map_get, cat(@node_to_string(code, formal_param_id), ".getValue()")) :-

    enhanced_for_statement(_, formal_param, expression, body),
    formal_parameter(formal_param, _, _, formal_param_id),
    source_code(_, code),

    /* expression is a call to map.entrySet() */
    method_invocation(expression, map_reference, "entrySet", nil),

    /* extract map information */
    point_of_declaration(map_reference, decl),

    /* body contains a declaration where the value is entry.getKey() */
    block(body, stmts),
    list_contains(stmts, vardecl_statement),
    local_variable_declaration_statement(vardecl_statement, declaration),
    local_variable_declaration(declaration, _, _, [declarator, nil]),
    variable_declarator(declarator, _, initializer),
    method_invocation(initializer, get_key_subject, "getKey", nil),
    point_of_declaration(get_key_subject, formal_param),

    /* body contains a call to map.get(key) */
    ancestor_of(body, map_get),
    method_invocation(map_get, map_get_subject, "get", [key, nil]),
    point_of_declaration(map_get_subject, decl),
    point_of_declaration(key, declaration).

/**
 * Use entry.getValue() instead of map.get(entry.getKey()) if available.
 */
replace_node_with_string("fix_inefficient_map_access", map_get, cat(@node_to_string(code, get_key_subject), ".getValue()")) :-

    enhanced_for_statement(_, formal_param, expression, body),
    source_code(_, code),

    /* expression is a call to map.entrySet() */
    method_invocation(expression, map_reference, "entrySet", nil),

    /* extract map information */
    point_of_declaration(map_reference, decl),

    /* body contains a call to map.get(entry.getKey()) */
    ancestor_of(body, map_get),
    method_invocation(map_get, map_get_subject, "get", [entry, nil]),
    point_of_declaration(map_get_subject, decl),
    method_invocation(entry, get_key_subject, "getKey", nil),
    point_of_declaration(get_key_subject, formal_parameter).
