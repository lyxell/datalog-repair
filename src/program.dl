#include "rules/fix_broken_null_checks/implementation.dl"
#include "rules/fix_calls_to_thread_run/implementation.dl"
#include "rules/fix_imprecise_calls_to_bigdecimal/implementation.dl"
#include "rules/fix_inefficient_calls_to_foreach_list_add/implementation.dl"
#include "rules/fix_inefficient_map_access/implementation.dl"
#include "rules/fix_null_pointer_exceptions_by_changing_the_order_of_arguments_in_string_comparison/implementation.dl"
#include "rules/fix_null_returns_in_tostring/implementation.dl"
#include "rules/fix_potential_resource_leaks/implementation.dl"
#include "rules/fix_raw_use_of_empty_collections/implementation.dl"
#include "rules/fix_raw_use_of_generic_class/implementation.dl"
#include "rules/remove_empty_declarations/implementation.dl"
#include "rules/remove_empty_finally_blocks/implementation.dl"
#include "rules/remove_empty_if_statements/implementation.dl"
#include "rules/remove_empty_nested_blocks/implementation.dl"
#include "rules/remove_empty_statements/implementation.dl"
#include "rules/remove_empty_try_blocks/implementation.dl"
#include "rules/remove_redundant_casts/implementation.dl"
#include "rules/remove_redundant_calls_to_close/implementation.dl"
#include "rules/remove_redundant_calls_to_collection_addall/implementation.dl"
#include "rules/remove_redundant_collection_copies/implementation.dl"
#include "rules/remove_redundant_parentheses/implementation.dl"
#include "rules/remove_redundant_try_blocks/implementation.dl"
#include "rules/remove_repeated_unary_operators/implementation.dl"
#include "rules/remove_unnecessary_calls_to_string_valueof/implementation.dl"
#include "rules/remove_unnecessary_declarations_above_return_statements/implementation.dl"
#include "rules/remove_unnecessary_null_check_before_string_equals_comparison/implementation.dl"
#include "rules/remove_unnecessary_return/implementation.dl"
#include "rules/remove_unused_assignments/implementation.dl"
#include "rules/remove_unused_imports/implementation.dl"
#include "rules/remove_unused_local_variables/implementation.dl"
#include "rules/remove_use_of_fully_qualified_names/implementation.dl"
#include "rules/simplify_boolean_expressions/implementation.dl"
#include "rules/simplify_calls_to_collection_removeall/implementation.dl"
#include "rules/simplify_calls_to_constructor_for_string_conversion/implementation.dl"
#include "rules/simplify_calls_to_map_keyset/implementation.dl"
#include "rules/simplify_calls_to_string_substring/implementation.dl"
#include "rules/simplify_calls_to_substring_and_startswith/implementation.dl"
#include "rules/simplify_code_using_collection_isempty/implementation.dl"
//#include "rules/simplify_code_using_lambda_expressions/implementation.dl"
#include "rules/simplify_code_using_map_computeifabsent/implementation.dl"
#include "rules/simplify_code_using_method_references/implementation.dl"
#include "rules/simplify_code_using_streams/implementation.dl"
#include "rules/simplify_inverted_boolean_expressions/implementation.dl"
#include "rules/simplify_lambdas_containing_a_block_with_only_one_statement/implementation.dl"
#include "rules/simplify_return_of_boolean_expressions/implementation.dl"
#include "rules/simplify_ternary_conditional_expressions/implementation.dl"
#include "rules/use_lambda_argument_in_map_computeifabsent/implementation.dl"

#include "datalog/nodes.dl"
#include "datalog/typechecking.dl"

/* Types
 ********************************/

.type id = [type: symbol, filename: symbol, content_from: number, content_to: number, from: number, to: number]
.type id_list = [head: id, tail: id_list]

.type type = [package: symbol, class: symbol, type_args: type_list]
.type type_list = [head: type, tail: type_list]

/* Functors
 ********************************/

.functor decrease_indentation(x: symbol):symbol stateful
.functor type_to_string(x: type):symbol stateful
.functor type_to_qualified_string(x: type):symbol stateful

/* AST nodes
 ********************************/

.decl root(id: id)
.input root

.decl ast_node(id: id)
ast_node(id) :- root(id).
ast_node(child) :-
    ast_node(ancestor),
    ancestor_of(ancestor, child).

.decl filename_of(id: id, filename: symbol)
filename_of([name, fn, cA, cB, A, B], fn) :- ast_node([name, fn, cA, cB, A, B]).

.decl name_of(id: id, name: symbol)
name_of([name, fn, cA, cB, A, B], name) :- ast_node([name, fn, cA, cB, A, B]).

.decl starts_at(id: id, at: number)
starts_at([name, fn, cA, cB, A, B], A) :- ast_node([name, fn, cA, cB, A, B]).

.decl ends_at(id: id, at: number)
ends_at([name, fn, cA, cB, A, B], B) :- ast_node([name, fn, cA, cB, A, B]).

.decl content_starts_at(id: id, at: number)
content_starts_at([name, fn, cA, cB, A, B], cA) :- ast_node([name, fn, cA, cB, A, B]).

.decl content_ends_at(id: id, at: number)
content_ends_at([name, fn, cA, cB, A, B], cB) :- ast_node([name, fn, cA, cB, A, B]).

/* Javadoc
 ********************************/

.decl javadoc_references(filename: symbol, class: symbol)
.input javadoc_references

/* AST node relations
 ********************************/

.decl parent_of(parent: id, name: symbol, child: id)
.input parent_of

.decl parent_of_list(parent: id, name: symbol, children: id_list)
.input parent_of_list

/* transitive closure of parent_of and parent_of list */
.decl ancestor_of(ancestor: id, child: id)
ancestor_of(x, y) :-
    parent_of(x, _, y).
ancestor_of(x, z) :-
    ancestor_of(x, y),
    parent_of(y, _, z).
ancestor_of(x, y) :-
    parent_of_list(x, _, children),
    list_contains(children, y).
ancestor_of(x, z) :-
    ancestor_of(x, y),
    parent_of_list(y, _, children),
    list_contains(children, z).

.decl head_of(head: id, tail: id_list)
head_of(head, tail) :-
    parent_of_list(_, _, [head, tail]).
head_of(head, tail) :-
    head_of(_, [head, tail]).

/* is x at the position just before y in a list? */
.decl predecessor_of(x: id, y: id)
predecessor_of(x, y) :-
    head_of(x, [y, _]).

/* transitive closure of predecessor_of */
.decl precedes(x: id, y: id)
precedes(x, y) :-
    predecessor_of(x, y).
precedes(x, z) :-
    precedes(x, y),
    predecessor_of(y, z).

/* does the list contain the element? */
.decl list_contains(list: id_list, id: id)
list_contains([head,tail], head) :-
    parent_of_list(_, _, [head, tail]).
list_contains(list, b) :-
    list_contains(list, a),
    predecessor_of(a, b).

.decl list_last_element(list: id_list, id: id)
list_last_element(list, id) :-
    list_contains(list, id),
    head_of(id, nil).

.decl list_first_element(list: id_list, id: id)
list_first_element([head, tail], head) :-
    parent_of_list(_, _, [head, tail]).

/* Constant evaluation
 ********************************/

.decl evaluates_to_integer_value(id: id, value: number)
evaluates_to_integer_value(id, 0) :-
    integer_literal(id),
    string_representation(id, "0").
evaluates_to_integer_value(id, 1) :-
    integer_literal(id),
    string_representation(id, "1").
/* TODO
evaluates_to_integer_value(id, to_number(repr)) :-
    integer_literal(id),
    string_representation(id, repr).
*/
evaluates_to_integer_value(id, left_value + right_value) :-
    addition_expression(id, left, right),
    evaluates_to_integer_value(left, left_value),
    evaluates_to_integer_value(right, right_value).
evaluates_to_integer_value(id, left_value * right_value) :-
    multiplication_expression(id, left, right),
    evaluates_to_integer_value(left, left_value),
    evaluates_to_integer_value(right, right_value).
evaluates_to_integer_value(id, left_value - right_value) :-
    subtraction_expression(id, left, right),
    evaluates_to_integer_value(left, left_value),
    evaluates_to_integer_value(right, right_value).

.decl evaluates_to_boolean_value(id: id, value: number)
evaluates_to_boolean_value(id, 0) :-
    content_string_representation(id, "false").
evaluates_to_boolean_value(id, 1) :-
    content_string_representation(id, "true").
evaluates_to_boolean_value(id, left_value land right_value) :-
    conditional_and_expression(id, left, right),
    evaluates_to_boolean_value(left, left_value),
    evaluates_to_boolean_value(right, right_value).
evaluates_to_boolean_value(id, left_value lor right_value) :-
    conditional_or_expression(id, left, right),
    evaluates_to_boolean_value(left, left_value),
    evaluates_to_boolean_value(right, right_value).
evaluates_to_boolean_value(id, 1) :-
    equals_expression(id, left, right),
    evaluates_to_integer_value(left, x),
    evaluates_to_integer_value(right, x).
evaluates_to_boolean_value(id, 0) :-
    equals_expression(id, left, right),
    evaluates_to_integer_value(left, x),
    evaluates_to_integer_value(right, y),
    x != y.

/* String representation
 ********************************/

.decl source_code(filename: symbol, str: symbol)
.input source_code

.decl string_representation(id: id, str: symbol)
string_representation(id, substr(code, start, end - start)) :-
    ast_node(id),
    filename_of(id, filename),
    starts_at(id, start),
    ends_at(id, end),
    source_code(filename, code).

.decl content_string_representation(id: id, str: symbol)
content_string_representation(id, substr(code, start, end - start)) :-
    ast_node(id),
    filename_of(id, filename),
    content_starts_at(id, start),
    content_ends_at(id, end),
    source_code(filename, code).

.decl string_representation_list(list: id_list, str: symbol)
string_representation_list(list, substr(code, start, end - start)) :-
    list_first_element(list, first),
        starts_at(first, start),
        filename_of(first, filename),
    list_last_element(list, last),
        ends_at(last, end),
        filename_of(last, filename),
    source_code(filename, code).

/* Variable scope
 ********************************/

/**
 * The scope of a local variable declaration in a block (ยง14.2) is the rest of
 * the block in which the declaration appears, starting with its own
 * initializer (ยง14.4) and including any further declarators to the right in
 * the local variable declaration statement.
 * https://docs.oracle.com/javase/specs/jls/se6/html/statements.html
 */

.decl in_scope(start: number, end: number, filename: symbol, identifier: symbol, type: id)

/* Make resource in try_with_resources_statement accessible in its body */
in_scope(start, end, filename, identifier_str, resource) :-
    try_with_resources_statement(_, resources, body, _, _),
        starts_at(body, start),
        ends_at(body, end),
        filename_of(body, filename),
    list_contains(resources, resource),
    parent_of(resource, "name", identifier),
    string_representation(identifier, identifier_str).

/* Make variable declaration of for_statement available in its body */
in_scope(start, end, filename, identifier_str, declaration) :-
    for_statement(_, declaration, _, _, body),
    local_variable_declaration(declaration, _, _, declarators),
    list_contains(declarators, declarator),
    variable_declarator(declarator, declarator_id, _),
    variable_declarator_id(declarator_id, identifier, _),
    string_representation(identifier, identifier_str),
        starts_at(body, start),
        ends_at(body, end),
        filename_of(body, filename).

/* Make formal parameter in enhanced_for_statement accessible in its body */
in_scope(start, end, filename, identifier_str, param) :-
    enhanced_for_statement(_, param, _, body),
    formal_parameter(param, _, _, identifier),
    string_representation(identifier, identifier_str),
        starts_at(body, start),
        ends_at(body, end),
        filename_of(body, filename).

/* Make field declarations in scope in their class */
in_scope(start, end, filename, identifier_str, field) :-
    class_declaration(_, _, _, _, _, body),
        starts_at(body, start),
        ends_at(body, end),
        filename_of(body, filename),
    class_body(body, decls),
    list_contains(decls, field),
    field_declaration(field, _, _, declarators),
    list_contains(declarators, declarator),
    variable_declarator(declarator, declarator_id, _),
    variable_declarator_id(declarator_id, identifier, _),
    string_representation(identifier, identifier_str).

/* Make formal parameters accessible in the body of a method */
in_scope(start, end, filename, identifier_str, param) :-
    method_declaration(_, _, header, body),
        starts_at(body, start),
        ends_at(body, end),
        filename_of(body, filename),
    method_header(header, _, declarator, _),
    parent_of_list(declarator, "params", params),
    list_contains(params, param),
    formal_parameter(param, _, _, declarator_id),
    variable_declarator_id(declarator_id, identifier, _),
    string_representation(identifier, identifier_str).

/* Make formal parameters accessible in the body of a constructor */
in_scope(start, end, filename, identifier_str, param) :-
    constructor_declaration(_, _, declarator, _, body),
        starts_at(body, start),
        ends_at(body, end),
        filename_of(body, filename),
    parent_of_list(declarator, "params", params),
    list_contains(params, param),
    formal_parameter(param, _, _, declarator_id),
    variable_declarator_id(declarator_id, identifier, _),
    string_representation(identifier, identifier_str).

/* Make local variable declarations accessible in the succeeding statements */
in_scope(start, end, filename, identifier_str, declaration) :-
    parent_of_list(id, _, stmts),
        ends_at(id, end),
        filename_of(id, filename),
    list_contains(stmts, declaration_statement),
    local_variable_declaration_statement(declaration_statement, declaration),
    local_variable_declaration(declaration, _, _, declarators),
    predecessor_of(declaration_statement, succeeding_statement),
        starts_at(succeeding_statement, start),
    list_contains(declarators, declarator),
    variable_declarator(declarator, declarator_id, _),
    variable_declarator_id(declarator_id, identifier, _),
    string_representation(identifier, identifier_str).

/* Point of declaration
 ********************************/

.decl expression_name_has_formal_parameter_or_local_var_decl_in_scope(id: id, decl: id)
expression_name_has_formal_parameter_or_local_var_decl_in_scope(id, decl) :-
    expression_name(id, [head, _]),
        starts_at(id, expr_start),
        ends_at(id, expr_end),
        filename_of(id, filename),
    in_scope(start, end, filename, identifier, decl),
    local_variable_declaration(decl, _, _, _),
    string_representation(head, identifier),
        expr_start >= start,
        expr_end <= end.
    
expression_name_has_formal_parameter_or_local_var_decl_in_scope(id, decl) :-
    expression_name(id, [head, _]),
        starts_at(id, expr_start),
        ends_at(id, expr_end),
        filename_of(id, filename),
    in_scope(start, end, filename, identifier, decl),
    formal_parameter(decl, _, _, _),
    string_representation(head, identifier),
        expr_start >= start,
        expr_end <= end.

expression_name_has_formal_parameter_or_local_var_decl_in_scope(id, decl) :-
    expression_name(id, [head, _]),
        starts_at(id, expr_start),
        ends_at(id, expr_end),
        filename_of(id, filename),
    in_scope(start, end, filename, identifier, decl),
    name_of(decl, "resource"),
    string_representation(head, identifier),
        expr_start >= start,
        expr_end <= end.

.decl point_of_declaration(id: id, declaration: id)
/* If there is a local variable declaration or a formal parameter in scope,
   the identifier definitely refers to it (these can't be shadowed) */
point_of_declaration(head, decl) :-
    expression_name(id, [head, _]),
    expression_name_has_formal_parameter_or_local_var_decl_in_scope(id, decl).
    
/* If there is no local variable declarations of formal parameters in scope
   the identifier refers to the field */
point_of_declaration(head, decl) :-
    expression_name(id, [head, _]),
        starts_at(id, start),
        ends_at(id, end),
        filename_of(id, filename),
    in_scope(scope_start, scope_end, filename, identifier, decl),
    string_representation(head, identifier),
    field_declaration(decl, _, _, _),
        start >= scope_start,
        end <= scope_end,
    ! expression_name_has_formal_parameter_or_local_var_decl_in_scope(id, _).

/* We can always refer to a field of a class using "this" */
point_of_declaration(id, decl) :-
    field_access(id, this, field),
        starts_at(id, start),
        ends_at(id, end),
        filename_of(id, filename),
    name_of(this, "this_expression"),
    in_scope(scope_start, scope_end, filename, identifier, decl),
    field_declaration(decl, _, _, _),
    string_representation(field, identifier),
        start >= scope_start,
        end <= scope_end.

/* If an expression name contains only one identifier then the whole
   expression refers to its identifier */
point_of_declaration(id, decl) :-
    expression_name(id, [head, nil]),
    point_of_declaration(head, decl).

/* Rewrite rules
 ********************************/

.decl rewrite_node(rule: symbol, id: id, to: symbol)

.decl rewrite(rule: symbol, filename: symbol, start: number, end: number, to: symbol)
rewrite(rule, filename, start, end, to) :-
    rewrite_node(rule, id, to),
    starts_at(id, start),
    ends_at(id, end),
    filename_of(id, filename).
.output rewrite(IO=stdout)
